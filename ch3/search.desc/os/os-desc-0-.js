searchState.loadedDescShard("os", 0, "The main module and entrypoint\nclear BSS segment\nConstants in the kernel\nSBI console driver, for text output\nThe global allocator\nkernel log info\nThe panic handler\nLoading user applications into memory\nGlobal logger\nPrint! to the host console using the format string and …\nPrintln! to the host console using the format string and …\nthe rust entry-point of os\nSBI call wrappers\nSynchronization and interior mutability primitives\nImplementation of syscalls\nTask management implementation\nRISC-V timer-related functionality\nTrap handling functionality\nbase_addr(changed) of app\nsize limit of app\nclock frequency\nkernel heap size\nkernel stack size\nthe max number of apps\nthe physical memory end\nuser app’s stack size\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nheap allocator instance\nheap space ([u8; KERNEL_HEAP_SIZE])\npanic when heap allocation error occurs\ninitiate heap allocator\npanic handler\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet base address of app i.\nGet the total number of applications.\nget app info with entry and sp and save <code>TrapContext</code> in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad nth user app at [APP_BASE_ADDRESS + n * …\na simple logger\nReturns the argument unchanged.\ninitiate logger\nCalls <code>U::from(self)</code>.\nuse sbi call to putchar in console (qemu uart handler)\ngeneral sbi call\nuse sbi call to set timer\nuse sbi call to shutdown the kernel\nWrap a static data structure inside it so that we are able …\ninner data\nUniprocessor interior mutability primitives\nWrap a static data structure inside it so that we are able …\nPanic if the data has been borrowed.\nReturns the argument unchanged.\ninner data\nCalls <code>U::from(self)</code>.\nUser is responsible to guarantee that inner struct is only …\nexit syscall\ngettime syscall\ntrace syscall\nwrite syscall\nyield syscall\nFile and filesystem-related syscalls\nProcess management syscalls\nhandle syscall exception with <code>syscall_id</code> and other …\nwrite buf of length <code>len</code>  to a file with <code>fd</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ntask exits and submit an exit code\nget time with second and microsecond\ncurrent task gives up resources for other tasks\nexited\nready to run\nrunning\nGlobal variable: TASK_MANAGER\ntask context structure containing some registers\nThe task control block (TCB) of a task.\nThe task manager, where all the tasks are managed.\nInner of Task Manager\nThe status of a task\nuninitialized\nImplementation of <code>TaskContext</code>\nid of current <code>Running</code> task\nExit the current ‘Running’ task and run the next task …\nFind next task to run and return task id.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nuse inner value to get mutable access\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChange the status of current <code>Running</code> task into <code>Exited</code>.\nChange the status of current <code>Running</code> task into <code>Exited</code>.\nChange the status of current <code>Running</code> task into <code>Ready</code>.\nChange the status of current <code>Running</code> task into <code>Ready</code>.\ntotal number of tasks\nRet position after task switching\nRun the first task in task list.\nRun the first task in task list.\nSwitch current <code>Running</code> task to the task we have found, or …\nSwitch current <code>Running</code> task to the task we have found, or …\ns0-11 register, callee saved\nStack pointer\nSuspend the current ‘Running’ task and run the next …\nRust wrapper around <code>__switch</code>.\nTypes related to task management\nThe task context\nThe task status in it’s lifecycle\ntask list\ntask context structure containing some registers\nReturns the argument unchanged.\nCreate a new task context with a trap return addr and a …\nCalls <code>U::from(self)</code>.\nRet position after task switching\ns0-11 register, callee saved\nStack pointer\nCreate a new empty task context\nSwitch to the context of <code>next_task_cx_ptr</code>, saving the …\nexited\nready to run\nrunning\nThe task control block (TCB) of a task.\nThe status of a task\nuninitialized\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe task context\nThe task status in it’s lifecycle\nThe number of microseconds per second\nThe number of milliseconds per second\nThe number of ticks per second\nGet the current time in ticks\nget current time in milliseconds\nget current time in microseconds\nSet the next timer interrupt\ntrap context structure containing sstatus, sepc and …\nenable timer interrupt in supervisor mode\nInitialize trap handling\nSupervisor Exception Program Counter\nSupervisor Status Register\ntrap handler\nGeneral-Purpose Register x0-31\ntrap context structure containing sstatus, sepc and …\ninit the trap context of an application\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSupervisor Exception Program Counter\nput the sp(stack pointer) into x[2] field of TrapContext\nSupervisor Status Register\nGeneral-Purpose Register x0-31")